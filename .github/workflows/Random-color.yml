name: 🎨 Random Capsule Gradient

on:
  push:
    branches: [ main ]          # 每次推送到 main 分支时触发
  schedule:
    - cron: '0 0 * * *'         # 每天 00:00 UTC 触发一次
  workflow_dispatch:            # 支持手动触发

permissions:
  contents: write               # 授予写仓库权限以更新 README

jobs:
  gradient:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3  # 检出代码库
        with:
          fetch-depth: 0          # 拉取完整历史以避免冲突
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq  # 安装 jq 用于解析 JSON

      - name: Check config.json existence
        run: |
          if [ ! -f config.json ]; then
            echo "Error: config.json not found. Creating default config.json."
            echo '{
              "header": {"text": "👋 Hi, I'\''m BlueSeagull", "desc": "Welcome to my GitHub"},
              "footer": {"text": "", "desc": ""},
              "intro": {"text": "🚀 喜欢写代码、读书、折腾新技术"}
            }' > config.json
            git add config.json
            git commit -m "Add default config.json" || true
          fi

      - name: Read text from config.json
        id: read_config
        run: |
          # 读取 config.json 中的文字
          header_text=$(jq -r '.header.text' config.json)
          header_desc=$(jq -r '.header.desc' config.json)
          footer_text=$(jq -r '.footer.text' config.json)
          footer_desc=$(jq -r '.footer.desc' config.json)
          intro_text=$(jq -r '.intro.text // "🚀 喜欢写代码、读书、折腾新技术"' config.json)
          # URL 编码（仅对 capsule-render 的参数）
          header_text_encoded=$(echo -n "$header_text" | python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.stdin.read()))")
          header_desc_encoded=$(echo -n "$header_desc" | python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.stdin.read()))")
          footer_text_encoded=$(echo -n "$footer_text" | python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.stdin.read()))")
          footer_desc_encoded=$(echo -n "$footer_desc" | python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.stdin.read()))")
          # 输出到后续步骤
          echo "header_text_encoded=$header_text_encoded" >> $GITHUB_OUTPUT
          echo "header_desc_encoded=$header_desc_encoded" >> $GITHUB_OUTPUT
          echo "footer_text_encoded=$footer_text_encoded" >> $GITHUB_OUTPUT
          echo "footer_desc_encoded=$footer_desc_encoded" >> $GITHUB_OUTPUT
          echo "intro_text=$intro_text" >> $GITHUB_OUTPUT
          echo "Read header_text: $header_text"
          echo "Read header_desc: $header_desc"
          echo "Read intro_text: $intro_text"

      - name: Generate random gradient colors
        id: generate_colors
        run: |
          # 清新淡雅的颜色池
          colors=(
            "A3BFFA"  # 浅紫蓝
            "AED9E0"  # 湖蓝
            "B9E4C9"  # 薄荷绿
            "C1E1C1"  # 淡绿
            "D4F1F4"  # 水蓝
            "E0F7FA"  # 浅青
            "F8C8DC"  # 樱花粉
            "F5E1E6"  # 淡粉
            "FAD2CF"  # 蜜桃粉
            "E6E6FA"  # 薰衣草紫
            "F0E4D7"  # 米白
            "D8D8F0"  # 淡紫
          )
          # 随机挑选 4 个颜色
          selected_colors=($(shuf -n 4 -e "${colors[@]}"))
          # capsule-render 格式: 0:hex1,33:hex2,66:hex3,100:hex4
          capsule_color="0:${selected_colors[0]},33:${selected_colors[1]},66:${selected_colors[2]},100:${selected_colors[3]}"
          # github-readme-stats 格式: angle,hex1,hex2,hex3,hex4
          stats_color="0,${selected_colors[0]},${selected_colors[1]},${selected_colors[2]},${selected_colors[3]}"
          # 输出到后续步骤
          echo "capsule_color=$capsule_color" >> $GITHUB_OUTPUT
          echo "stats_color=$stats_color" >> $GITHUB_OUTPUT
          echo "Generated capsule_color: $capsule_color"
          echo "Generated stats_color: $stats_color"

      - name: Fetch external README
        id: fetch_external
        run: |
          if ! curl -s -f https://raw.githubusercontent.com/BlueSeagull-CHN/PersonalConfiguration/refs/heads/main/README.md > external_readme.md; then
            echo "Failed to fetch external README, using fallback content"
            echo "<p>Unable to load external resources</p>" > external_readme.md
          fi
          # 调整标题层级（# -> ###, ## -> ####），替换 --- 为 <hr>
          external_content=$(cat external_readme.md | perl -pe 's/^# /### /; s/^## /#### /; s/^---\n/<hr style="border: 1px solid #F8C8DC; margin: 20px 0;">\n/')
          # 转义换行符和双引号
          external_content=$(echo "$external_content" | perl -pe 's/\n/\\n/g; s/"/\\"/g')
          echo "external_content=$external_content" >> $GITHUB_OUTPUT

      - name: Update README with gradients, text, and external content
        run: |
          # 获取变量
          capsule_color="${{ steps.generate_colors.outputs.capsule_color }}"
          stats_color="${{ steps.generate_colors.outputs.stats_color }}"
          header_text_encoded="${{ steps.read_config.outputs.header_text_encoded }}"
          header_desc_encoded="${{ steps.read_config.outputs.header_desc_encoded }}"
          footer_text_encoded="${{ steps.read_config.outputs.footer_text_encoded }}"
          footer_desc_encoded="${{ steps.read_config.outputs.footer_desc_encoded }}"
          intro_text="${{ steps.read_config.outputs.intro_text }}"
          external_content="${{ steps.fetch_external.outputs.external_content }}"

          # 定义块
          header_block="<!-- capsulate-header-start -->\n<p>\n  <img src=\"https://capsule-render.vercel.app/api?type=waving&height=200&section=header&fontSize=40&fontAlignY=35&text=${header_text_encoded}&desc=${header_desc_encoded}&descAlignY=55&color=${capsule_color}\" alt=\"header\"/>\n</p>\n<!-- capsulate-header-end -->"

          intro_block="<!-- intro-start -->\n<h3>\n  ${intro_text}\n</h3>\n<!-- intro-end -->"

          external_block="<!-- external-start -->\n<h4>📚 External Resources</h4>\n${external_content}\n<!-- external-end -->"

          footer_block="<!-- capsulate-footer-start -->\n<p>\n  <img src=\"https://capsule-render.vercel.app/api?type=waving&height=100&section=footer&color=${capsule_color}\" alt=\"footer\"/>\n</p>\n<!-- capsulate-footer-end -->"

          stats_block="<!-- github-stats-start -->\n<p>\n  <img height=\"160\" src=\"https://github-readme-stats-bay.vercel.app/api?username=BlueSeagull-CHN&hide_title=true&hide_border=true&show_icons=true&include_all_commits=true&line_height=21&bg_color=${stats_color}&theme=graywhite\" alt=\"stats\"/>\n</p>\n<!-- github-stats-end -->"

          # 使用 Perl 替换
          perl -0777 -pe "
            s|<!-- capsulate-header-start -->.*?<!-- capsulate-header-end -->|$header_block|s;
            s|<!-- intro-start -->.*?<!-- intro-end -->|$intro_block|s;
            s|<!-- external-start -->.*?<!-- external-end -->|$external_block|s;
            s|<!-- capsulate-footer-start -->.*?<!-- capsulate-footer-end -->|$footer_block|s;
            s|<!-- github-stats-start -->.*?<!-- github-stats-end -->|$stats_block|s;
          " -i README.md

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md config.json
          if ! git diff --quiet || ! git diff --staged --quiet; then
            git commit -m "🎨 chore: update capsule, stats gradients, intro text, and external content"
            git push || {
              echo "Push failed, attempting force push"
              git push --force
            }
          else
            echo "No changes to commit"
          fi
